
			 #ifndef FLEX_GRAMMAR_H_
			 
			 #define FLEX_GRAMMAR_H_
			 
			 #define TOKEN_NUM 108
#define NTERM_LEN 49
#define TERM_LEN  59
#define S NewAxiom

#define is_terminal(token) ((uint8_t)((token & 0x40000000) >> 30))
#define token_value(token) ((uint32_t)(token & 0xBFFFFFFF))
#define gr_term_key(token) (token_value(token) - NTERM_LEN)
#define gr_nterm_key(token)(token_value(token))
#define gr_term_token(key) ((gr_token)(0xBFFFFFFF | (key + NTERM_LEN)))
#define gr_nterm_token(key) ((gr_token)key)

typedef enum gr_token {
  NewAxiom = 0, elseIfBlock, eCeCe__exprList__fieldList__fieldListBody__nameList__parList__varList, additiveExp__baseExp__caretExp__concatExp__expr__exprList__field__fieldList__fieldListBody__logicalAndExp__logicalOrExp__multiplicativeExp__relationalExp__unaryExp, bracketedExp, varList, fieldList, eCe__exprList__fieldList__fieldListBody__varList, block__chunk, concatExp__expr__exprList__field__fieldList__fieldListBody__logicalAndExp__logicalOrExp__relationalExp, eCe__exprList__fieldList__fieldListBody__parList, chunk, block__chunk__retStat, eCe__exprList__fieldList__fieldListBody__nameList__parList__varList, exprList__fieldList__fieldListBody__varList, exprThen, exprList__fieldList__fieldListBody__parList, funcName, block__chunk__label__stat__statList, eCe__exprList__fieldList__fieldListBody, fieldList__fieldListBody, additiveExp__concatExp__expr__exprList__field__fieldList__fieldListBody__logicalAndExp__logicalOrExp__multiplicativeExp__relationalExp, funcName__nameDotList, exprList__fieldList__fieldListBody, additiveExp__baseExp__caretExp__concatExp__expr__exprList__field__fieldList__fieldListBody__funcName__logicalAndExp__logicalOrExp__multiplicativeExp__name__nameDotList__nameList__parList__prefixExp__relationalExp__unaryExp__var__varList, field__fieldList__fieldListBody, additiveExp__baseExp__caretExp__concatExp__expr__exprList__field__fieldList__fieldListBody__functionDef__logicalAndExp__logicalOrExp__multiplicativeExp__relationalExp__unaryExp, eCeCe__exprList__fieldList__fieldListBody__varList, expr__exprList__field__fieldList__fieldListBody__logicalAndExp__logicalOrExp, block__chunk__stat__statList, additiveExp__baseExp__caretExp__concatExp__dot3__expr__exprList__field__fieldList__fieldListBody__logicalAndExp__logicalOrExp__multiplicativeExp__parList__relationalExp__unaryExp, additiveExp__baseExp__caretExp__concatExp__expr__exprList__field__fieldList__fieldListBody__logicalAndExp__logicalOrExp__multiplicativeExp__relationalExp__tableConstructor__unaryExp, additiveExp__concatExp__expr__exprList__field__fieldList__fieldListBody__logicalAndExp__logicalOrExp__multiplicativeExp__relationalExp__unaryExp, additiveExp__baseExp__caretExp__concatExp__expr__exprList__field__fieldList__fieldListBody__funcName__logicalAndExp__logicalOrExp__multiplicativeExp__nameDotList__prefixExp__relationalExp__unaryExp__var__varList, exprList, additiveExp__baseExp__block__caretExp__chunk__concatExp__expr__exprList__field__fieldList__fieldListBody__functionCall__logicalAndExp__logicalOrExp__multiplicativeExp__prefixExp__relationalExp__stat__statList__unaryExp, nameList__parList, block__chunk__statList, eCeCe__exprList__fieldList__fieldListBody__parList, exprThenElseIfB, exprList__fieldList__fieldListBody__nameList__parList__varList, eCeCe__exprList__fieldList__fieldListBody, additiveExp__baseExp__caretExp__concatExp__expr__exprList__field__fieldList__fieldListBody__logicalAndExp__logicalOrExp__multiplicativeExp__prefixExp__relationalExp__unaryExp__var__varList, parList, expr__exprList__field__fieldList__fieldListBody__logicalOrExp, expr__exprList__field__fieldList__fieldListBody__logicalAndExp__logicalOrExp__relationalExp, additiveExp__concatExp__expr__exprList__field__fieldList__fieldListBody__logicalAndExp__logicalOrExp__relationalExp, additiveExp__baseExp__caretExp__concatExp__expr__exprList__field__fieldList__fieldListBody__logicalAndExp__logicalOrExp__multiplicativeExp__prefixExp__relationalExp__unaryExp, additiveExp__caretExp__concatExp__expr__exprList__field__fieldList__fieldListBody__logicalAndExp__logicalOrExp__multiplicativeExp__relationalExp__unaryExp,
  ENDFILE = 0x40000031, RETURN, SEMI, XEQ, BREAK, GOTO, NAME, DO, END, WHILE, REPEAT, UNTIL, IF, ELSE, FOR, IN, FUNCTION, LPARENFUNC, RPARENFUNC, LOCAL, ELSEIF, THEN, COMMA, DOT3, COLON2, COLON, DOT, LBRACK, RBRACK, OR, AND, LT, GT, LTEQ, GTEQ, NEQ, EQ2, DOT2, PLUS, MINUS, ASTERISK, DIVIDE, PERCENT, NOT, SHARP, UMINUS, CARET, NIL, FALSE, TRUE, NUMBER, STRING, LPAREN, RPAREN, LBRACE, RBRACE, SEMIFIELD, EQ, TERM
} gr_token;

#endif
